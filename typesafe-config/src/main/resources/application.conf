repeating-message: "Hello world from the 'application.conf' file!"

pause: "1.5 seconds"
# Declare an override. An override is a config assignment for a config that has already been declared. This assignment allows
# the 'pause' config to be assignable from a config named 'PAUSE' (case matters!). If a config named 'PAUSE' cannot be found
# within the configuration *files* then the environment will be searched for an environment variable named 'PAUSE'. If this
# is not found, then this override simply vanishes and the earlier "1.5 seconds" value will be used. The "?" syntax is
# known as the "vanishing syntax".
pause: ${?PAUSE}
# This override is the same form as the above override. This instance has the effect that an enivronment variable named
# 'pause1' will be considered for the 'pause' config. Remember, Typesafe Config is different than some other
# configuration systems because it does not incorporate environment variables by default. Environment variables must be
# incorporated explicitly with declarations like this one and/or the 'config.override_with_env_vars' Java system property.
# The trailing "1" in the substitution highlights and interesting issue. If there was no trailing "1", then this line has
# no effect and the "1.5 seconds" value is used. I'm not 100% sure and I don't want to figure it out! Typesafe Config is
# not a fool-proof system. In fact, there can't exist a fool-proof configuration system. You will always have to learn
# how the system works. In this example, I would just recommend NOT using lowercase environment variable names because that
# is not convential anyway.
pause: ${?pause1}

repetitions: 3
# This assignment makes the 'repetitions' configuration value assignable via an environment variable of the name 'REPETITIONS'.
# This is an example of HOCON's substitution sytnax.
repetitions: ${?REPETITIONS}
